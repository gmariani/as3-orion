/**
* Orion ©2009 Gabriel Mariani. February 6th, 2009
* Visit http://blog.coursevector.com/orion for documentation, updates and more free code.
*
*
* Copyright (c) 2009 Gabriel Mariani
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
**/

package cv {
	
	import cv.orion.Orion;
	import cv.orion.events.ParticleEvent;
	import cv.orion.interfaces.IFilter;
	import cv.orion.ParticleVO;
	import flash.display.BlendMode;
	import flash.geom.ColorTransform;
	
	import flash.display.DisplayObject;
	import flash.display.DisplayObjectContainer;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	
	//--------------------------------------
    //  Class description
    //--------------------------------------
	/**
	 * OrionContainer takes a movieclip and animates the children inside
	 * of it as if they were particles. Does not add any new particles to the system.
	 * 
	 * Also any changes to the dimensions or position of the emitter are ignored.
     */
	public class OrionContainer extends Orion {
		
		/**
		 * Gets or sets the blend mode applied to particles when they are created. It is also
		 * used when caching particles.
		 */
		public var cacheBlendMode:String = BlendMode.NORMAL;
		
		/**
		 * Gets or sets whether bitmap caching is enabled on particles used within this emitter. 
		 * If set to true, Flash Player or Adobe AIR caches an internal bitmap representation of 
		 * the display object. This caching can increase performance for display objects that 
		 * contain complex vector content.
		 */
		public var useCacheAsBitmap:Boolean = false;
		
		/**
		 * This offset is used by the BitmapRenderer to fix render issues.
		 * This is set automatically by assignParticles(), but is public to
		 * allow for custom alignment if necessary.
		 */
		public var offSet:Point = new Point();
		
		/** @private */
		private var _spriteTarget:DisplayObjectContainer;
		/** @private */
		protected const _clr:ColorTransform = new ColorTransform();
		
		/**
		 * The constructor for OrionContainer is slightly different from Orion. You cannot specify an output class
		 * becuase it is not used by OrionContainer. No new particles are created so there is nothing to output. Secondly
		 * you cannot specify framecaching becuase again, no new particles are created while this runs. 
		 * 
		 * When the constructor runs, the canvas is automatically set to the stage dimensions (if available) and 
		 * corrects for the target's position.
		 * 
		 * In debug mode, the emitter is positioned according to the coordinates of the target's parent. For
		 * the emitter to be positioned accurately, OrionContainer must be attached to the same DisplayObject
		 * as the target. This is only for the debug lines to be accurate, it's not required for anything else.
		 * 
		 * @param	target<DisplayObject> The display object to use.
		 * @param	assignChildren<Boolean> Whether to add the target or the children inside the target.
		 * @param	config	Here you can pass in a <code>configuration</code> object. A <code>configuration</code> object is generated by a 
		 * preset or you can write one by hand. Each <code>configuration</code> object can contain an <code>effectFilters</code> array, an
		 * <code>edgeFilter</code> object, and a <code>settings</code> object. The <code>settings</code> object can contain all the same properties that
		 * modifying the <code>settings</code> property directly allows.<br/><br/>If no config is passed, OrionContainer will automatically pause
		 * to allow the settings object to be configured before starting.
		 */
		public function OrionContainer(spriteTarget:DisplayObjectContainer, config:Object = null) {
			_spriteTarget = spriteTarget;
			super(config);
			
			// Create Particles
			var numParticles:int = _spriteTarget.numChildren - 1;
			_particles = createParticle(numParticles);
			var currentParticle:ParticleVO = _particles;
			var i:int = numParticles;
			while (--i > -1) {
				currentParticle = currentParticle.next = createParticle(i);
			}
			
			var b:Rectangle = _spriteTarget.getBounds(_spriteTarget.parent);
			offSet.x = b.x;
			offSet.y = b.y;
			_emitter.width = b.width;
			_emitter.height = b.height;
			_emitter.x = b.x;
			_emitter.y = b.y;
			
			// Init canvas if reference to stage is available
			if(_spriteTarget.stage) {
				var pt:Point = _spriteTarget.globalToLocal(new Point());
				canvas = new Rectangle(pt.x + offSet.x, pt.y + offSet.y, _spriteTarget.stage.stageWidth, _spriteTarget.stage.stageHeight);
			}
		}
		
		//--------------------------------------
		//  Properties
		//--------------------------------------
		
		/**
		 * Gets the height of the emitter, setting is disabled.
		 */
		override public function get height():Number { return _emitter.height; }
		/** @private **/
		override public function set height(value:Number):void { }
		
		/**
         * The SpriteTarget property is OrionContainer's equivalent of SpriteClass.
         * This sets the target to use as particles.
		 */
		public function get spriteTarget():DisplayObjectContainer { return _spriteTarget; }
		/** @private **/
		public function set spriteTarget(value:DisplayObjectContainer):void {
			_spriteTarget = value;
			removeAllParticles();
			createAllParticles();
		}
		
		/**
		 * Gets the width of the emitter, setting is disabled.
		 */
		override public function get width():Number { return _emitter.width; }
		/** @private **/
		override public function set width(value:Number):void { }
		
		/**
		 * Gets the x position of the emitter, setting is disabled.
		 * 
		 * @see Orion#getCoordinate()
		 * @see Orion#y
		 */
		override public function get x():Number { return _emitter.x; }
		/** @private **/
		override public function set x(value:Number):void { }
		
		/**
		 * Gets the y position of the emitter, setting is disabled.
		 * 
		 * @see Orion#getCoordinate()
		 * @see Orion#x
		 */
		override public function get y():Number { return _emitter.y; }
		/** @private **/
		override public function set y(value:Number):void {	}
		
		//--------------------------------------
		//  Methods
		//--------------------------------------
		
		override public function render(e:Event = null):void {
			// Draw boxes for emitter and canvas
			if (debug) {
				this.graphics.clear();
				this.graphics.lineStyle(1, 0x00FF00, 1, true);
				this.graphics.drawRect(this.x, this.y, this.width, this.height);
				this.graphics.moveTo(this.x, this.y);
				this.graphics.lineTo(this.x, this.y);
				this.graphics.lineTo(this.x + this.width, this.y + this.height);
				this.graphics.moveTo(this.x + this.width, this.y);
				this.graphics.lineTo(this.x + this.width, this.y);
				this.graphics.lineTo(this.x, this.y + this.height);
				if(canvas) {
					this.graphics.lineStyle(1, 0xFF0000, 1, true);
					this.graphics.drawRect(canvas.x, canvas.y, canvas.width, canvas.height);
				}
			}
			
			if (paused) return;
			
			var lifeSpan:uint = settings.lifeSpan;
			var particle:ParticleVO = _particles;
			var numEmit:int = _emitQueue.length - 1;
			var numAdd:uint = output.getOutput(this);
			var length:uint = 0;
			var curTime:uint = Orion.time;
			var i:uint;
			var effectFiltersLength:uint = effectFilters.length;
			var _effectFilters:Vector.<IFilter> = effectFilters;
			var _edgeFilter:IFilter = edgeFilter;
			var dispatch:Boolean = (_willTriggerFlags & 0x08) != 0;
			var event:ParticleEvent = _eventUpdate;
			
			do {
				if(particle.active) {
					// Too old
					if (lifeSpan > 0) {
						if ((curTime - particle.timeStamp) > lifeSpan) {
							removeParticle(particle);
							continue;
						}
					}
					
					// Count particles
					++length;
					
					if (!particle.paused) {
						// Apply Filters
						i = effectFiltersLength;
						if(i > 0) {
							while (--i > -1) {
								_effectFilters[i].applyFilter(particle, this);
							}
						}
						
						// Position particle
						if (particle.velocityX != 0) particle.target.x += particle.velocityX;
						if (particle.velocityY != 0) particle.target.y += particle.velocityY;
						if (particle.velocityZ != 0) particle.target.rotation += particle.velocityZ;
						if (_edgeFilter) _edgeFilter.applyFilter(particle, this);
					}
					
					// Dispatch update event
					if (dispatch) {
						event.particle = particle;
						dispatchEvent(event);
					}
				} else if (numAdd > 0) {
					// Add new
					if(addParticle(particle)) --numAdd;
				} else if (numEmit >= 0) {
					// Can't emit new
					_emitQueue.pop();
					--numEmit;
				}
				
				particle = particle.next;
			} while (particle);	
			
			_numParticles = length;
			
			if ((_willTriggerFlags & 0x02) != 0)  dispatchEvent(_eventChange);
		}
		
		//--------------------------------------
		//  Private
		//--------------------------------------
		
		// TODO: Fix
		override protected function additionalInit(p:ParticleVO, pt:Point):void {
			if(settings.velocityRotateMin != settings.velocityRotateMax) {
				p.velocityZ = randomRange(settings.velocityRotateMin, settings.velocityRotateMax);
			} else {
				p.velocityZ = settings.velocityRotate;
			}
			
			if(settings.colorMin != settings.colorMax) {
				_clr.color = interpolateColor(settings.colorMin, settings.colorMax, Math.random());
			} else if(!isNaN(settings.color)) {
				_clr.color = settings.color;
			}
			
			if(settings.alphaMin != settings.alphaMax) {
				_clr.alphaMultiplier = randomRange(settings.alphaMin, settings.alphaMax);
			} else {
				_clr.alphaMultiplier = settings.alpha;
			}
			
			var scale:Number = settings.scale;
			if (settings.scaleMin != settings.scaleMax) {
				scale = randomRange(settings.scaleMin, settings.scaleMax);
			}
			
			var rotate:Number = settings.rotate;
			if(settings.rotateMin != settings.rotateMax) {
				rotate = randomRange(settings.rotateMin, settings.rotateMax);
			}
			
			// Update position/color
			_mtx.identity();
			_mtx.createBox(scale, scale, rotate * DEG2RAD, pt.x, pt.y);
			p.target.transform.colorTransform = _clr;
			p.target.transform.matrix = _mtx;
		}
		
		override protected function createParticle(idx:int = 0):ParticleVO {
			var d:DisplayObject = _spriteTarget.getChildAt(idx);
			d.blendMode = cacheBlendMode;
			d.cacheAsBitmap = useCacheAsBitmap;
			//resetParticle(p);
			return new ParticleVO(d);
		}
	}
}